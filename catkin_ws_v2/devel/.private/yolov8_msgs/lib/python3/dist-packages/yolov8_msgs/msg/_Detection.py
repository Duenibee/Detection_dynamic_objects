# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yolov8_msgs/Detection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import yolov8_msgs.msg

class Detection(genpy.Message):
  _md5sum = "31ba195dd6b98bf5c109b7496238608a"
  _type = "yolov8_msgs/Detection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# defines a YOLOv8 detection result

# class probability
int32 class_id
string class_name
float64 score

# ID for tracking
string id

# 2D bounding box surrounding the object in pixels
yolov8_msgs/BoundingBox2D bbox

# 3D bounding box surrounding the object in meters
yolov8_msgs/BoundingBox3D bbox3d

# segmentation mask of the detected object
# it is only the boundary of the segmented object
yolov8_msgs/Mask mask

# keypoints for human pose estimation
yolov8_msgs/KeyPoint2DArray keypoints

# keypoints for human pose estimation
yolov8_msgs/KeyPoint3DArray keypoints3d
================================================================================
MSG: yolov8_msgs/BoundingBox2D
# 2D position and orientation of the bounding box center
yolov8_msgs/Pose2D center

# total size of the bounding box, in pixels, surrounding the object's center
yolov8_msgs/Vector2 size

# id of the keypoint
int32 id

================================================================================
MSG: yolov8_msgs/Pose2D
# 2D position in pixel coordinates

yolov8_msgs/Point2D position
float64 theta
================================================================================
MSG: yolov8_msgs/Point2D
# 2D point in pixel coordinates

float64 x
float64 y
================================================================================
MSG: yolov8_msgs/Vector2
# 2D size in pixel

float64 x
float64 y
================================================================================
MSG: yolov8_msgs/BoundingBox3D
# 3D position and orientation of the bounding box center
geometry_msgs/Pose center

# total size of the bounding box, in meters, surrounding the object's center
geometry_msgs/Vector3 size

# frame reference
string frame_id

# id of the keypoint
int32 id
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: yolov8_msgs/Mask
# segmentation mask for one instance

# size of the original image
int32 height
int32 width

# mask data represeted by the points of the border of the mask
yolov8_msgs/Point2D[] data


================================================================================
MSG: yolov8_msgs/KeyPoint2DArray
# represents all the keypoints for human pose estimation

yolov8_msgs/KeyPoint2D[] data
================================================================================
MSG: yolov8_msgs/KeyPoint2D
# one keypoint for human pose estimation

# id of the keypoint
int32 id

# 2D point in pixels
yolov8_msgs/Point2D point

# conf of the keypoint
float64 score
================================================================================
MSG: yolov8_msgs/KeyPoint3DArray
# represents all the keypoints for human pose estimation in meters

yolov8_msgs/KeyPoint3D[] data

# frame reference
string frame_id
================================================================================
MSG: yolov8_msgs/KeyPoint3D
# one keypoint for human pose estimation

# id of the keypoint
int32 id

# 3D point in meters
geometry_msgs/Point point

# conf of the keypoint
float64 score"""
  __slots__ = ['class_id','class_name','score','id','bbox','bbox3d','mask','keypoints','keypoints3d']
  _slot_types = ['int32','string','float64','string','yolov8_msgs/BoundingBox2D','yolov8_msgs/BoundingBox3D','yolov8_msgs/Mask','yolov8_msgs/KeyPoint2DArray','yolov8_msgs/KeyPoint3DArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       class_id,class_name,score,id,bbox,bbox3d,mask,keypoints,keypoints3d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Detection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.class_id is None:
        self.class_id = 0
      if self.class_name is None:
        self.class_name = ''
      if self.score is None:
        self.score = 0.
      if self.id is None:
        self.id = ''
      if self.bbox is None:
        self.bbox = yolov8_msgs.msg.BoundingBox2D()
      if self.bbox3d is None:
        self.bbox3d = yolov8_msgs.msg.BoundingBox3D()
      if self.mask is None:
        self.mask = yolov8_msgs.msg.Mask()
      if self.keypoints is None:
        self.keypoints = yolov8_msgs.msg.KeyPoint2DArray()
      if self.keypoints3d is None:
        self.keypoints3d = yolov8_msgs.msg.KeyPoint3DArray()
    else:
      self.class_id = 0
      self.class_name = ''
      self.score = 0.
      self.id = ''
      self.bbox = yolov8_msgs.msg.BoundingBox2D()
      self.bbox3d = yolov8_msgs.msg.BoundingBox3D()
      self.mask = yolov8_msgs.msg.Mask()
      self.keypoints = yolov8_msgs.msg.KeyPoint2DArray()
      self.keypoints3d = yolov8_msgs.msg.KeyPoint3DArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.class_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.class_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.score
      buff.write(_get_struct_d().pack(_x))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5di10d().pack(_x.bbox.center.position.x, _x.bbox.center.position.y, _x.bbox.center.theta, _x.bbox.size.x, _x.bbox.size.y, _x.bbox.id, _x.bbox3d.center.position.x, _x.bbox3d.center.position.y, _x.bbox3d.center.position.z, _x.bbox3d.center.orientation.x, _x.bbox3d.center.orientation.y, _x.bbox3d.center.orientation.z, _x.bbox3d.center.orientation.w, _x.bbox3d.size.x, _x.bbox3d.size.y, _x.bbox3d.size.z))
      _x = self.bbox3d.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.bbox3d.id, _x.mask.height, _x.mask.width))
      length = len(self.mask.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.mask.data:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.keypoints.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.keypoints.data:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1.score
        buff.write(_get_struct_d().pack(_x))
      length = len(self.keypoints3d.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.keypoints3d.data:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _v2 = val1.point
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.score
        buff.write(_get_struct_d().pack(_x))
      _x = self.keypoints3d.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bbox is None:
        self.bbox = yolov8_msgs.msg.BoundingBox2D()
      if self.bbox3d is None:
        self.bbox3d = yolov8_msgs.msg.BoundingBox3D()
      if self.mask is None:
        self.mask = yolov8_msgs.msg.Mask()
      if self.keypoints is None:
        self.keypoints = yolov8_msgs.msg.KeyPoint2DArray()
      if self.keypoints3d is None:
        self.keypoints3d = yolov8_msgs.msg.KeyPoint3DArray()
      end = 0
      start = end
      end += 4
      (self.class_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_name = str[start:end]
      start = end
      end += 8
      (self.score,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.bbox.center.position.x, _x.bbox.center.position.y, _x.bbox.center.theta, _x.bbox.size.x, _x.bbox.size.y, _x.bbox.id, _x.bbox3d.center.position.x, _x.bbox3d.center.position.y, _x.bbox3d.center.position.z, _x.bbox3d.center.orientation.x, _x.bbox3d.center.orientation.y, _x.bbox3d.center.orientation.z, _x.bbox3d.center.orientation.w, _x.bbox3d.size.x, _x.bbox3d.size.y, _x.bbox3d.size.z,) = _get_struct_5di10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox3d.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox3d.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.bbox3d.id, _x.mask.height, _x.mask.width,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mask.data = []
      for i in range(0, length):
        val1 = yolov8_msgs.msg.Point2D()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.mask.data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keypoints.data = []
      for i in range(0, length):
        val1 = yolov8_msgs.msg.KeyPoint2D()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v3 = val1.point
        _x = _v3
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(str[start:end])
        self.keypoints.data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keypoints3d.data = []
      for i in range(0, length):
        val1 = yolov8_msgs.msg.KeyPoint3D()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v4 = val1.point
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(str[start:end])
        self.keypoints3d.data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keypoints3d.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keypoints3d.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.class_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.class_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.score
      buff.write(_get_struct_d().pack(_x))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5di10d().pack(_x.bbox.center.position.x, _x.bbox.center.position.y, _x.bbox.center.theta, _x.bbox.size.x, _x.bbox.size.y, _x.bbox.id, _x.bbox3d.center.position.x, _x.bbox3d.center.position.y, _x.bbox3d.center.position.z, _x.bbox3d.center.orientation.x, _x.bbox3d.center.orientation.y, _x.bbox3d.center.orientation.z, _x.bbox3d.center.orientation.w, _x.bbox3d.size.x, _x.bbox3d.size.y, _x.bbox3d.size.z))
      _x = self.bbox3d.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.bbox3d.id, _x.mask.height, _x.mask.width))
      length = len(self.mask.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.mask.data:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.keypoints.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.keypoints.data:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _v5 = val1.point
        _x = _v5
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1.score
        buff.write(_get_struct_d().pack(_x))
      length = len(self.keypoints3d.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.keypoints3d.data:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _v6 = val1.point
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.score
        buff.write(_get_struct_d().pack(_x))
      _x = self.keypoints3d.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bbox is None:
        self.bbox = yolov8_msgs.msg.BoundingBox2D()
      if self.bbox3d is None:
        self.bbox3d = yolov8_msgs.msg.BoundingBox3D()
      if self.mask is None:
        self.mask = yolov8_msgs.msg.Mask()
      if self.keypoints is None:
        self.keypoints = yolov8_msgs.msg.KeyPoint2DArray()
      if self.keypoints3d is None:
        self.keypoints3d = yolov8_msgs.msg.KeyPoint3DArray()
      end = 0
      start = end
      end += 4
      (self.class_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_name = str[start:end]
      start = end
      end += 8
      (self.score,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.bbox.center.position.x, _x.bbox.center.position.y, _x.bbox.center.theta, _x.bbox.size.x, _x.bbox.size.y, _x.bbox.id, _x.bbox3d.center.position.x, _x.bbox3d.center.position.y, _x.bbox3d.center.position.z, _x.bbox3d.center.orientation.x, _x.bbox3d.center.orientation.y, _x.bbox3d.center.orientation.z, _x.bbox3d.center.orientation.w, _x.bbox3d.size.x, _x.bbox3d.size.y, _x.bbox3d.size.z,) = _get_struct_5di10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bbox3d.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bbox3d.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.bbox3d.id, _x.mask.height, _x.mask.width,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mask.data = []
      for i in range(0, length):
        val1 = yolov8_msgs.msg.Point2D()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.mask.data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keypoints.data = []
      for i in range(0, length):
        val1 = yolov8_msgs.msg.KeyPoint2D()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v7 = val1.point
        _x = _v7
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(str[start:end])
        self.keypoints.data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keypoints3d.data = []
      for i in range(0, length):
        val1 = yolov8_msgs.msg.KeyPoint3D()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v8 = val1.point
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(str[start:end])
        self.keypoints3d.data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.keypoints3d.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.keypoints3d.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_5di10d = None
def _get_struct_5di10d():
    global _struct_5di10d
    if _struct_5di10d is None:
        _struct_5di10d = struct.Struct("<5di10d")
    return _struct_5di10d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
