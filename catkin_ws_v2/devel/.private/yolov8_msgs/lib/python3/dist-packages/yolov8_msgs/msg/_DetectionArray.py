# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yolov8_msgs/DetectionArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import yolov8_msgs.msg

class DetectionArray(genpy.Message):
  _md5sum = "ab40dfc0c14b3f3b43fd349e871f56de"
  _type = "yolov8_msgs/DetectionArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# represents all YOLOv8 detections in one frame

std_msgs/Header header
yolov8_msgs/Detection[] detections
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: yolov8_msgs/Detection
# defines a YOLOv8 detection result

# class probability
int32 class_id
string class_name
float64 score

# ID for tracking
string id

# 2D bounding box surrounding the object in pixels
yolov8_msgs/BoundingBox2D bbox

# 3D bounding box surrounding the object in meters
yolov8_msgs/BoundingBox3D bbox3d

# segmentation mask of the detected object
# it is only the boundary of the segmented object
yolov8_msgs/Mask mask

# keypoints for human pose estimation
yolov8_msgs/KeyPoint2DArray keypoints

# keypoints for human pose estimation
yolov8_msgs/KeyPoint3DArray keypoints3d
================================================================================
MSG: yolov8_msgs/BoundingBox2D
# 2D position and orientation of the bounding box center
yolov8_msgs/Pose2D center

# total size of the bounding box, in pixels, surrounding the object's center
yolov8_msgs/Vector2 size

# id of the keypoint
int32 id

================================================================================
MSG: yolov8_msgs/Pose2D
# 2D position in pixel coordinates

yolov8_msgs/Point2D position
float64 theta
================================================================================
MSG: yolov8_msgs/Point2D
# 2D point in pixel coordinates

float64 x
float64 y
================================================================================
MSG: yolov8_msgs/Vector2
# 2D size in pixel

float64 x
float64 y
================================================================================
MSG: yolov8_msgs/BoundingBox3D
# 3D position and orientation of the bounding box center
geometry_msgs/Pose center

# total size of the bounding box, in meters, surrounding the object's center
geometry_msgs/Vector3 size

# frame reference
string frame_id

# id of the keypoint
int32 id
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: yolov8_msgs/Mask
# segmentation mask for one instance

# size of the original image
int32 height
int32 width

# mask data represeted by the points of the border of the mask
yolov8_msgs/Point2D[] data


================================================================================
MSG: yolov8_msgs/KeyPoint2DArray
# represents all the keypoints for human pose estimation

yolov8_msgs/KeyPoint2D[] data
================================================================================
MSG: yolov8_msgs/KeyPoint2D
# one keypoint for human pose estimation

# id of the keypoint
int32 id

# 2D point in pixels
yolov8_msgs/Point2D point

# conf of the keypoint
float64 score
================================================================================
MSG: yolov8_msgs/KeyPoint3DArray
# represents all the keypoints for human pose estimation in meters

yolov8_msgs/KeyPoint3D[] data

# frame reference
string frame_id
================================================================================
MSG: yolov8_msgs/KeyPoint3D
# one keypoint for human pose estimation

# id of the keypoint
int32 id

# 3D point in meters
geometry_msgs/Point point

# conf of the keypoint
float64 score"""
  __slots__ = ['header','detections']
  _slot_types = ['std_msgs/Header','yolov8_msgs/Detection[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,detections

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectionArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.detections is None:
        self.detections = []
    else:
      self.header = std_msgs.msg.Header()
      self.detections = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections:
        _x = val1.class_id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.class_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.score
        buff.write(_get_struct_d().pack(_x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.bbox
        _v2 = _v1.center
        _v3 = _v2.position
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = _v2.theta
        buff.write(_get_struct_d().pack(_x))
        _v4 = _v1.size
        _x = _v4
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = _v1.id
        buff.write(_get_struct_i().pack(_x))
        _v5 = val1.bbox3d
        _v6 = _v5.center
        _v7 = _v6.position
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = _v6.orientation
        _x = _v8
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v9 = _v5.size
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v5.id
        buff.write(_get_struct_i().pack(_x))
        _v10 = val1.mask
        _x = _v10
        buff.write(_get_struct_2i().pack(_x.height, _x.width))
        length = len(_v10.data)
        buff.write(_struct_I.pack(length))
        for val3 in _v10.data:
          _x = val3
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v11 = val1.keypoints
        length = len(_v11.data)
        buff.write(_struct_I.pack(length))
        for val3 in _v11.data:
          _x = val3.id
          buff.write(_get_struct_i().pack(_x))
          _v12 = val3.point
          _x = _v12
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
          _x = val3.score
          buff.write(_get_struct_d().pack(_x))
        _v13 = val1.keypoints3d
        length = len(_v13.data)
        buff.write(_struct_I.pack(length))
        for val3 in _v13.data:
          _x = val3.id
          buff.write(_get_struct_i().pack(_x))
          _v14 = val3.point
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val3.score
          buff.write(_get_struct_d().pack(_x))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.detections is None:
        self.detections = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections = []
      for i in range(0, length):
        val1 = yolov8_msgs.msg.Detection()
        start = end
        end += 4
        (val1.class_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_name = str[start:end]
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v15 = val1.bbox
        _v16 = _v15.center
        _v17 = _v16.position
        _x = _v17
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (_v16.theta,) = _get_struct_d().unpack(str[start:end])
        _v18 = _v15.size
        _x = _v18
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (_v15.id,) = _get_struct_i().unpack(str[start:end])
        _v19 = val1.bbox3d
        _v20 = _v19.center
        _v21 = _v20.position
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v22 = _v20.orientation
        _x = _v22
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v23 = _v19.size
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v19.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v19.frame_id = str[start:end]
        start = end
        end += 4
        (_v19.id,) = _get_struct_i().unpack(str[start:end])
        _v24 = val1.mask
        _x = _v24
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v24.data = []
        for i in range(0, length):
          val3 = yolov8_msgs.msg.Point2D()
          _x = val3
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          _v24.data.append(val3)
        _v25 = val1.keypoints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v25.data = []
        for i in range(0, length):
          val3 = yolov8_msgs.msg.KeyPoint2D()
          start = end
          end += 4
          (val3.id,) = _get_struct_i().unpack(str[start:end])
          _v26 = val3.point
          _x = _v26
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          start = end
          end += 8
          (val3.score,) = _get_struct_d().unpack(str[start:end])
          _v25.data.append(val3)
        _v27 = val1.keypoints3d
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v27.data = []
        for i in range(0, length):
          val3 = yolov8_msgs.msg.KeyPoint3D()
          start = end
          end += 4
          (val3.id,) = _get_struct_i().unpack(str[start:end])
          _v28 = val3.point
          _x = _v28
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val3.score,) = _get_struct_d().unpack(str[start:end])
          _v27.data.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v27.frame_id = str[start:end]
        self.detections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections:
        _x = val1.class_id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.class_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.score
        buff.write(_get_struct_d().pack(_x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v29 = val1.bbox
        _v30 = _v29.center
        _v31 = _v30.position
        _x = _v31
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = _v30.theta
        buff.write(_get_struct_d().pack(_x))
        _v32 = _v29.size
        _x = _v32
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = _v29.id
        buff.write(_get_struct_i().pack(_x))
        _v33 = val1.bbox3d
        _v34 = _v33.center
        _v35 = _v34.position
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.orientation
        _x = _v36
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v37 = _v33.size
        _x = _v37
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v33.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v33.id
        buff.write(_get_struct_i().pack(_x))
        _v38 = val1.mask
        _x = _v38
        buff.write(_get_struct_2i().pack(_x.height, _x.width))
        length = len(_v38.data)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.data:
          _x = val3
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v39 = val1.keypoints
        length = len(_v39.data)
        buff.write(_struct_I.pack(length))
        for val3 in _v39.data:
          _x = val3.id
          buff.write(_get_struct_i().pack(_x))
          _v40 = val3.point
          _x = _v40
          buff.write(_get_struct_2d().pack(_x.x, _x.y))
          _x = val3.score
          buff.write(_get_struct_d().pack(_x))
        _v41 = val1.keypoints3d
        length = len(_v41.data)
        buff.write(_struct_I.pack(length))
        for val3 in _v41.data:
          _x = val3.id
          buff.write(_get_struct_i().pack(_x))
          _v42 = val3.point
          _x = _v42
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val3.score
          buff.write(_get_struct_d().pack(_x))
        _x = _v41.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.detections is None:
        self.detections = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections = []
      for i in range(0, length):
        val1 = yolov8_msgs.msg.Detection()
        start = end
        end += 4
        (val1.class_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_name = str[start:end]
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v43 = val1.bbox
        _v44 = _v43.center
        _v45 = _v44.position
        _x = _v45
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (_v44.theta,) = _get_struct_d().unpack(str[start:end])
        _v46 = _v43.size
        _x = _v46
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (_v43.id,) = _get_struct_i().unpack(str[start:end])
        _v47 = val1.bbox3d
        _v48 = _v47.center
        _v49 = _v48.position
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v50 = _v48.orientation
        _x = _v50
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v51 = _v47.size
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v47.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v47.frame_id = str[start:end]
        start = end
        end += 4
        (_v47.id,) = _get_struct_i().unpack(str[start:end])
        _v52 = val1.mask
        _x = _v52
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v52.data = []
        for i in range(0, length):
          val3 = yolov8_msgs.msg.Point2D()
          _x = val3
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          _v52.data.append(val3)
        _v53 = val1.keypoints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v53.data = []
        for i in range(0, length):
          val3 = yolov8_msgs.msg.KeyPoint2D()
          start = end
          end += 4
          (val3.id,) = _get_struct_i().unpack(str[start:end])
          _v54 = val3.point
          _x = _v54
          start = end
          end += 16
          (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
          start = end
          end += 8
          (val3.score,) = _get_struct_d().unpack(str[start:end])
          _v53.data.append(val3)
        _v55 = val1.keypoints3d
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v55.data = []
        for i in range(0, length):
          val3 = yolov8_msgs.msg.KeyPoint3D()
          start = end
          end += 4
          (val3.id,) = _get_struct_i().unpack(str[start:end])
          _v56 = val3.point
          _x = _v56
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val3.score,) = _get_struct_d().unpack(str[start:end])
          _v55.data.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v55.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v55.frame_id = str[start:end]
        self.detections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
