// Generated by gencpp from file yolov8_msgs/Detection.msg
// DO NOT EDIT!


#ifndef YOLOV8_MSGS_MESSAGE_DETECTION_H
#define YOLOV8_MSGS_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yolov8_msgs/BoundingBox2D.h>
#include <yolov8_msgs/BoundingBox3D.h>
#include <yolov8_msgs/Mask.h>
#include <yolov8_msgs/KeyPoint2DArray.h>
#include <yolov8_msgs/KeyPoint3DArray.h>

namespace yolov8_msgs
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : class_id(0)
    , class_name()
    , score(0.0)
    , id()
    , bbox()
    , bbox3d()
    , mask()
    , keypoints()
    , keypoints3d()  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : class_id(0)
    , class_name(_alloc)
    , score(0.0)
    , id(_alloc)
    , bbox(_alloc)
    , bbox3d(_alloc)
    , mask(_alloc)
    , keypoints(_alloc)
    , keypoints3d(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _class_id_type;
  _class_id_type class_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef double _score_type;
  _score_type score;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef  ::yolov8_msgs::BoundingBox2D_<ContainerAllocator>  _bbox_type;
  _bbox_type bbox;

   typedef  ::yolov8_msgs::BoundingBox3D_<ContainerAllocator>  _bbox3d_type;
  _bbox3d_type bbox3d;

   typedef  ::yolov8_msgs::Mask_<ContainerAllocator>  _mask_type;
  _mask_type mask;

   typedef  ::yolov8_msgs::KeyPoint2DArray_<ContainerAllocator>  _keypoints_type;
  _keypoints_type keypoints;

   typedef  ::yolov8_msgs::KeyPoint3DArray_<ContainerAllocator>  _keypoints3d_type;
  _keypoints3d_type keypoints3d;





  typedef boost::shared_ptr< ::yolov8_msgs::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov8_msgs::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::yolov8_msgs::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::yolov8_msgs::Detection > DetectionPtr;
typedef boost::shared_ptr< ::yolov8_msgs::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov8_msgs::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov8_msgs::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov8_msgs::Detection_<ContainerAllocator1> & lhs, const ::yolov8_msgs::Detection_<ContainerAllocator2> & rhs)
{
  return lhs.class_id == rhs.class_id &&
    lhs.class_name == rhs.class_name &&
    lhs.score == rhs.score &&
    lhs.id == rhs.id &&
    lhs.bbox == rhs.bbox &&
    lhs.bbox3d == rhs.bbox3d &&
    lhs.mask == rhs.mask &&
    lhs.keypoints == rhs.keypoints &&
    lhs.keypoints3d == rhs.keypoints3d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov8_msgs::Detection_<ContainerAllocator1> & lhs, const ::yolov8_msgs::Detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov8_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov8_msgs::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov8_msgs::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_msgs::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_msgs::Detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_msgs::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_msgs::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov8_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31ba195dd6b98bf5c109b7496238608a";
  }

  static const char* value(const ::yolov8_msgs::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31ba195dd6b98bf5ULL;
  static const uint64_t static_value2 = 0xc109b7496238608aULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov8_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov8_msgs/Detection";
  }

  static const char* value(const ::yolov8_msgs::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov8_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# defines a YOLOv8 detection result\n"
"\n"
"# class probability\n"
"int32 class_id\n"
"string class_name\n"
"float64 score\n"
"\n"
"# ID for tracking\n"
"string id\n"
"\n"
"# 2D bounding box surrounding the object in pixels\n"
"yolov8_msgs/BoundingBox2D bbox\n"
"\n"
"# 3D bounding box surrounding the object in meters\n"
"yolov8_msgs/BoundingBox3D bbox3d\n"
"\n"
"# segmentation mask of the detected object\n"
"# it is only the boundary of the segmented object\n"
"yolov8_msgs/Mask mask\n"
"\n"
"# keypoints for human pose estimation\n"
"yolov8_msgs/KeyPoint2DArray keypoints\n"
"\n"
"# keypoints for human pose estimation\n"
"yolov8_msgs/KeyPoint3DArray keypoints3d\n"
"================================================================================\n"
"MSG: yolov8_msgs/BoundingBox2D\n"
"# 2D position and orientation of the bounding box center\n"
"yolov8_msgs/Pose2D center\n"
"\n"
"# total size of the bounding box, in pixels, surrounding the object's center\n"
"yolov8_msgs/Vector2 size\n"
"\n"
"# id of the keypoint\n"
"int32 id\n"
"\n"
"================================================================================\n"
"MSG: yolov8_msgs/Pose2D\n"
"# 2D position in pixel coordinates\n"
"\n"
"yolov8_msgs/Point2D position\n"
"float64 theta\n"
"================================================================================\n"
"MSG: yolov8_msgs/Point2D\n"
"# 2D point in pixel coordinates\n"
"\n"
"float64 x\n"
"float64 y\n"
"================================================================================\n"
"MSG: yolov8_msgs/Vector2\n"
"# 2D size in pixel\n"
"\n"
"float64 x\n"
"float64 y\n"
"================================================================================\n"
"MSG: yolov8_msgs/BoundingBox3D\n"
"# 3D position and orientation of the bounding box center\n"
"geometry_msgs/Pose center\n"
"\n"
"# total size of the bounding box, in meters, surrounding the object's center\n"
"geometry_msgs/Vector3 size\n"
"\n"
"# frame reference\n"
"string frame_id\n"
"\n"
"# id of the keypoint\n"
"int32 id\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: yolov8_msgs/Mask\n"
"# segmentation mask for one instance\n"
"\n"
"# size of the original image\n"
"int32 height\n"
"int32 width\n"
"\n"
"# mask data represeted by the points of the border of the mask\n"
"yolov8_msgs/Point2D[] data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: yolov8_msgs/KeyPoint2DArray\n"
"# represents all the keypoints for human pose estimation\n"
"\n"
"yolov8_msgs/KeyPoint2D[] data\n"
"================================================================================\n"
"MSG: yolov8_msgs/KeyPoint2D\n"
"# one keypoint for human pose estimation\n"
"\n"
"# id of the keypoint\n"
"int32 id\n"
"\n"
"# 2D point in pixels\n"
"yolov8_msgs/Point2D point\n"
"\n"
"# conf of the keypoint\n"
"float64 score\n"
"================================================================================\n"
"MSG: yolov8_msgs/KeyPoint3DArray\n"
"# represents all the keypoints for human pose estimation in meters\n"
"\n"
"yolov8_msgs/KeyPoint3D[] data\n"
"\n"
"# frame reference\n"
"string frame_id\n"
"================================================================================\n"
"MSG: yolov8_msgs/KeyPoint3D\n"
"# one keypoint for human pose estimation\n"
"\n"
"# id of the keypoint\n"
"int32 id\n"
"\n"
"# 3D point in meters\n"
"geometry_msgs/Point point\n"
"\n"
"# conf of the keypoint\n"
"float64 score\n"
;
  }

  static const char* value(const ::yolov8_msgs::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov8_msgs::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_id);
      stream.next(m.class_name);
      stream.next(m.score);
      stream.next(m.id);
      stream.next(m.bbox);
      stream.next(m.bbox3d);
      stream.next(m.mask);
      stream.next(m.keypoints);
      stream.next(m.keypoints3d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov8_msgs::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov8_msgs::Detection_<ContainerAllocator>& v)
  {
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "bbox: ";
    s << std::endl;
    Printer< ::yolov8_msgs::BoundingBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox);
    s << indent << "bbox3d: ";
    s << std::endl;
    Printer< ::yolov8_msgs::BoundingBox3D_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox3d);
    s << indent << "mask: ";
    s << std::endl;
    Printer< ::yolov8_msgs::Mask_<ContainerAllocator> >::stream(s, indent + "  ", v.mask);
    s << indent << "keypoints: ";
    s << std::endl;
    Printer< ::yolov8_msgs::KeyPoint2DArray_<ContainerAllocator> >::stream(s, indent + "  ", v.keypoints);
    s << indent << "keypoints3d: ";
    s << std::endl;
    Printer< ::yolov8_msgs::KeyPoint3DArray_<ContainerAllocator> >::stream(s, indent + "  ", v.keypoints3d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV8_MSGS_MESSAGE_DETECTION_H
