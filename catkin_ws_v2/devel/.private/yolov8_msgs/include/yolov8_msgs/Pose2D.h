// Generated by gencpp from file yolov8_msgs/Pose2D.msg
// DO NOT EDIT!


#ifndef YOLOV8_MSGS_MESSAGE_POSE2D_H
#define YOLOV8_MSGS_MESSAGE_POSE2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yolov8_msgs/Point2D.h>

namespace yolov8_msgs
{
template <class ContainerAllocator>
struct Pose2D_
{
  typedef Pose2D_<ContainerAllocator> Type;

  Pose2D_()
    : position()
    , theta(0.0)  {
    }
  Pose2D_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef  ::yolov8_msgs::Point2D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::yolov8_msgs::Pose2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov8_msgs::Pose2D_<ContainerAllocator> const> ConstPtr;

}; // struct Pose2D_

typedef ::yolov8_msgs::Pose2D_<std::allocator<void> > Pose2D;

typedef boost::shared_ptr< ::yolov8_msgs::Pose2D > Pose2DPtr;
typedef boost::shared_ptr< ::yolov8_msgs::Pose2D const> Pose2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov8_msgs::Pose2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov8_msgs::Pose2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov8_msgs::Pose2D_<ContainerAllocator1> & lhs, const ::yolov8_msgs::Pose2D_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov8_msgs::Pose2D_<ContainerAllocator1> & lhs, const ::yolov8_msgs::Pose2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov8_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov8_msgs::Pose2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov8_msgs::Pose2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_msgs::Pose2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_msgs::Pose2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_msgs::Pose2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_msgs::Pose2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov8_msgs::Pose2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8af0ef1db02b310d0bd6166725bf7b4";
  }

  static const char* value(const ::yolov8_msgs::Pose2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8af0ef1db02b310ULL;
  static const uint64_t static_value2 = 0xd0bd6166725bf7b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov8_msgs::Pose2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov8_msgs/Pose2D";
  }

  static const char* value(const ::yolov8_msgs::Pose2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov8_msgs::Pose2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 2D position in pixel coordinates\n"
"\n"
"yolov8_msgs/Point2D position\n"
"float64 theta\n"
"================================================================================\n"
"MSG: yolov8_msgs/Point2D\n"
"# 2D point in pixel coordinates\n"
"\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::yolov8_msgs::Pose2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov8_msgs::Pose2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov8_msgs::Pose2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov8_msgs::Pose2D_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::yolov8_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV8_MSGS_MESSAGE_POSE2D_H
