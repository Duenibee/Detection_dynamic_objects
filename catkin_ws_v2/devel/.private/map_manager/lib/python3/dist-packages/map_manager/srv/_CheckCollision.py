# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from map_manager/CheckCollisionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CheckCollisionRequest(genpy.Message):
  _md5sum = "3784dc4c69633fdb0fc9647695545409"
  _type = "map_manager/CheckCollisionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 z
float64 xsize
float64 ysize
float64 zsize
bool update_map
bool ignore_unknown
"""
  __slots__ = ['x','y','z','xsize','ysize','zsize','update_map','ignore_unknown']
  _slot_types = ['float64','float64','float64','float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,xsize,ysize,zsize,update_map,ignore_unknown

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckCollisionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.xsize is None:
        self.xsize = 0.
      if self.ysize is None:
        self.ysize = 0.
      if self.zsize is None:
        self.zsize = 0.
      if self.update_map is None:
        self.update_map = False
      if self.ignore_unknown is None:
        self.ignore_unknown = False
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.xsize = 0.
      self.ysize = 0.
      self.zsize = 0.
      self.update_map = False
      self.ignore_unknown = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d2B().pack(_x.x, _x.y, _x.z, _x.xsize, _x.ysize, _x.zsize, _x.update_map, _x.ignore_unknown))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.x, _x.y, _x.z, _x.xsize, _x.ysize, _x.zsize, _x.update_map, _x.ignore_unknown,) = _get_struct_6d2B().unpack(str[start:end])
      self.update_map = bool(self.update_map)
      self.ignore_unknown = bool(self.ignore_unknown)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d2B().pack(_x.x, _x.y, _x.z, _x.xsize, _x.ysize, _x.zsize, _x.update_map, _x.ignore_unknown))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.x, _x.y, _x.z, _x.xsize, _x.ysize, _x.zsize, _x.update_map, _x.ignore_unknown,) = _get_struct_6d2B().unpack(str[start:end])
      self.update_map = bool(self.update_map)
      self.ignore_unknown = bool(self.ignore_unknown)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d2B = None
def _get_struct_6d2B():
    global _struct_6d2B
    if _struct_6d2B is None:
        _struct_6d2B = struct.Struct("<6d2B")
    return _struct_6d2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from map_manager/CheckCollisionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CheckCollisionResponse(genpy.Message):
  _md5sum = "6314e54ac350a926e49f4f603eb76766"
  _type = "map_manager/CheckCollisionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool has_collision
"""
  __slots__ = ['has_collision']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       has_collision

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckCollisionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.has_collision is None:
        self.has_collision = False
    else:
      self.has_collision = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.has_collision
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.has_collision,) = _get_struct_B().unpack(str[start:end])
      self.has_collision = bool(self.has_collision)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.has_collision
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.has_collision,) = _get_struct_B().unpack(str[start:end])
      self.has_collision = bool(self.has_collision)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class CheckCollision(object):
  _type          = 'map_manager/CheckCollision'
  _md5sum = '175e32ae1f050a1a9b19e0c69bf5eab8'
  _request_class  = CheckCollisionRequest
  _response_class = CheckCollisionResponse
