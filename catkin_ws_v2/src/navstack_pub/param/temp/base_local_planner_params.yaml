DWAPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_th: 0.3
  acc_lim_x: 0.2
  acc_lim_y: 0.2

  #Set the velocity limits of the robot
  max_vel_x: 0.10
  min_vel_x: 0.05
  max_vel_y: 0.10
  min_vel_y: 0.05
  max_vel_theta: 0.1
  min_vel_theta: -0.1
  max_rotational_vel: 0.1
  min_in_place_rotational_vel: 0.1
  min_in_place_vel_theta: 0.1

  max_rot_vel: 0.1
  min_rot_vel: 0.01

  max_trans_vel: 0.1
  min_trans_vel: 0.05

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.2

  #For this example, we'll use a holonomic robot
  holonomic_robot: true

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 0.1
  latch_xy_goal_tolerance: true



  #Parameters for scoring trajectories
  goal_distance_bias: 0.8
  path_distance_bias: 1.0
  occdist_scale: 0.01
  heading_lookahead: 0.325

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: true

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05

  #Eat up the plan as the robot moves along it
  prune_plan: false



# TrajectoryPlannerROS:
#   max_vel_x: 0.1
#   min_vel_x: 0.01

#   max_vel_y: 0.1
#   min_vel_y: 0.01
#   max_vel_theta: 0.1
#   min_vel_theta: -0.1
#   min_in_place_vel_theta: 0.05

#   acc_lim_theta: 0.1
#   acc_lim_x: 0.1
#   acc_lim_Y: 0.1

#   holonomic_robot: true

#   meter_scoring: true

#   xy_goal_tolerance: 0.15
#   yaw_goal_tolerance: 0.25



TebLocalPlannerROS:

 odom_topic: /zed/odom_relay
 map_frame: /map

 # Trajectory

 teb_autosize: True
 dt_ref: 0.3
 dt_hysteresis: 0.1
 global_plan_overwrite_orientation: True
 max_global_plan_lookahead_dist: 3.0
 feasibility_check_no_poses: 5

 # Robot

 max_vel_x: 0.4
 max_vel_x_backwards: 0.2
 max_vel_theta: 0.3
 acc_lim_x: 0.5
 acc_lim_theta: 0.5
 min_turning_radius: 0.0
 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   type: "circular"
   radius: 0.2 # for type "circular"
   line_start: [-0.3, 0.0] # for type "line"
   line_end: [0.3, 0.0] # for type "line"
   front_offset: 0.2 # for type "two_circles"
   front_radius: 0.2 # for type "two_circles"
   rear_offset: 0.2 # for type "two_circles"
   rear_radius: 0.2 # for type "two_circles"
   vertices: [ [0.25, -0.05], [0.18, -0.05], [0.18, -0.18], [-0.19, -0.18], [-0.25, 0], [-0.19, 0.18], [0.18, 0.18], [0.18, 0.05], [0.25, 0.05] ] # for type "polygon"

 # GoalTolerance

 xy_goal_tolerance: 0.2
 yaw_goal_tolerance: 0.1
 free_goal_vel: False

 # Obstacles

 min_obstacle_dist: 0.4
 include_costmap_obstacles: True
 costmap_obstacles_behind_robot_dist: 1.0
 obstacle_poses_affected: 30
 costmap_converter_plugin: ""
 costmap_converter_spin_thread: True
 costmap_converter_rate: 5

 # Optimization

 no_inner_iterations: 5
 no_outer_iterations: 4
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.1
 weight_max_vel_x: 2
 weight_max_vel_theta: 1
 weight_acc_lim_x: 1
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1000
 weight_kinematics_forward_drive: 1
 weight_kinematics_turning_radius: 1
 weight_optimaltime: 1
 weight_obstacle: 50